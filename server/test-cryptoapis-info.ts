/**
 * Ki·ªÉm tra endpoint /info c·ªßa CryptoAPIs v√† xem text th·ª±c t·∫ø
 */

import fetch from 'node-fetch';

const API_KEY = process.env.CRYPTOAPIS_API_KEY || '';
const TIMEOUT_MS = 5000;

function fetchWithTimeout(url: string, options: any, timeout = TIMEOUT_MS) {
  return Promise.race([
    fetch(url, options),
    new Promise((_, reject) =>
      setTimeout(() => reject(new Error(`Request timed out after ${timeout}ms`)), timeout)
    )
  ]) as Promise<Response>;
}

async function testInfoEndpoint() {
  console.log('üîç Ki·ªÉm tra endpoint /info c·ªßa CryptoAPIs');
  console.log(`üîë API Key: ${API_KEY ? API_KEY.substring(0, 5) + '...' : 'Kh√¥ng c√≥ API key'}`);

  // URL endpoint
  const url = 'https://rest.cryptoapis.io/info';
  console.log(`üåê URL: ${url}`);

  // Headers
  const headers = {
    'Content-Type': 'application/json',
    'X-API-Key': API_KEY
  };

  try {
    console.log('üîÑ ƒêang g·ª≠i request...');
    const response = await fetchWithTimeout(url, {
      method: 'GET',
      headers: headers
    });

    console.log(`üìä Status: ${response.status} ${response.statusText}`);
    console.log('üìã Headers:', response.headers);

    if (!response.ok) {
      console.error('‚ùå L·ªói HTTP!');
      return;
    }

    // ƒê·ªçc response d∆∞·ªõi d·∫°ng text thay v√¨ JSON
    const responseText = await response.text();
    console.log('üìù Response Text:');
    console.log(responseText);
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i request:', error);
  }
}

// Run the test
testInfoEndpoint().catch(error => {
  console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error);
});