/**
 * Script ki·ªÉm tra CryptoAPIs v·ªõi th√¥ng tin chi ti·∫øt t·ª´ API response
 */

import fetch from 'node-fetch';

// ƒê·ªãa ch·ªâ Dogecoin ƒë·ªÉ ki·ªÉm tra
const TEST_ADDRESS = 'DQkwDpRYUyNNnoEZDfSGFFeQvLgbdEXiRd';

// Th·ªùi gian timeout
const TIMEOUT_MS = 15000;

// Function ƒë·ªÉ fetch v·ªõi timeout
function fetchWithTimeout(url: string, options: any, timeout = TIMEOUT_MS) {
  return Promise.race([
    fetch(url, options),
    new Promise((_, reject) =>
      setTimeout(() => reject(new Error(`Request timed out after ${timeout}ms`)), timeout)
    )
  ]) as Promise<Response>;
}

/**
 * Ki·ªÉm tra endpoint balance c·ªßa CryptoAPIs v·ªõi ƒë∆∞·ªùng d·∫´n ƒë√£ c·∫≠p nh·∫≠t
 */
async function testCryptoApisBalanceEndpoint() {
  console.log('üîç Ki·ªÉm tra CryptoAPIs Balance endpoint (ƒë∆∞·ªùng d·∫´n ƒë√£ c·∫≠p nh·∫≠t)');
  console.log(`üè† ƒê·ªãa ch·ªâ: ${TEST_ADDRESS}`);

  // L·∫•y API key t·ª´ environment variable
  const apiKey = process.env.CRYPTOAPIS_API_KEY || '';
  if (!apiKey) {
    console.error('‚ùå CRYPTOAPIS_API_KEY kh√¥ng ƒë∆∞·ª£c cung c·∫•p trong environment variables');
    return;
  }
  console.log(`üîë API Key: ${apiKey.substring(0, 5)}...`);

  // URL endpoint - ƒë∆∞·ªùng d·∫´n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo t√†i li·ªáu m·ªõi nh·∫•t
  const url = `https://rest.cryptoapis.io/v2/blockchain-data/dogecoin/mainnet/addresses/${TEST_ADDRESS}/balance`;
  console.log(`üåê URL: ${url}`);

  try {
    console.log('üîÑ ƒêang g·ª≠i request...');
    const response = await fetchWithTimeout(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': apiKey
      }
    });

    console.log(`üìä Status: ${response.status} ${response.statusText}`);

    // C·ªë g·∫Øng ƒë·ªçc response body d√π th√†nh c√¥ng hay th·∫•t b·∫°i
    const responseText = await response.text();
    
    try {
      // C·ªë g·∫Øng parse th√†nh JSON
      const data = JSON.parse(responseText);
      console.log('üìÑ Response data:');
      console.log(JSON.stringify(data, null, 2));
      
      if (!response.ok) {
        console.error('‚ùå L·ªói:', data.error?.message || 'Kh√¥ng x√°c ƒë·ªãnh');
        console.error('üìì Chi ti·∫øt l·ªói:', data.error?.details || 'Kh√¥ng c√≥ chi ti·∫øt');
        return;
      }
      
      // Extract balance if available
      if (data.data?.item?.confirmedBalance?.amount !== undefined) {
        console.log(`üí∞ S·ªë d∆∞: ${data.data.item.confirmedBalance.amount} DOGE`);
      }
    } catch (jsonError) {
      // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, hi·ªÉn th·ªã response text nguy√™n b·∫£n
      console.log('üìù Response text (kh√¥ng ph·∫£i JSON):');
      console.log(responseText);
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i request:', error);
  }
}

async function testCryptoApisListEndpoint() {
  console.log('\nüîç Ki·ªÉm tra CryptoAPIs List supported assets endpoint');

  // L·∫•y API key t·ª´ environment variable
  const apiKey = process.env.CRYPTOAPIS_API_KEY || '';
  if (!apiKey) {
    console.error('‚ùå CRYPTOAPIS_API_KEY kh√¥ng ƒë∆∞·ª£c cung c·∫•p trong environment variables');
    return;
  }

  // URL endpoint - th·ª≠ endpoint li·ªát k√™ blockchain ƒë∆∞·ª£c h·ªó tr·ª£
  const url = `https://rest.cryptoapis.io/v2/blockchain-data/info`;
  console.log(`üåê URL: ${url}`);

  try {
    console.log('üîÑ ƒêang g·ª≠i request...');
    const response = await fetchWithTimeout(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': apiKey
      }
    });

    console.log(`üìä Status: ${response.status} ${response.statusText}`);

    // C·ªë g·∫Øng ƒë·ªçc response body d√π th√†nh c√¥ng hay th·∫•t b·∫°i
    const responseText = await response.text();
    
    try {
      // C·ªë g·∫Øng parse th√†nh JSON
      const data = JSON.parse(responseText);
      console.log('üìÑ Response data:');
      console.log(JSON.stringify(data, null, 2));
    } catch (jsonError) {
      // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, hi·ªÉn th·ªã response text nguy√™n b·∫£n
      console.log('üìù Response text (kh√¥ng ph·∫£i JSON):');
      console.log(responseText);
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i request:', error);
  }
}

async function testCryptoApisAvailableEndpoints() {
  console.log('\nüîç Ki·ªÉm tra CryptoAPIs Available Endpoints cho Dogecoin');

  // L·∫•y API key t·ª´ environment variable
  const apiKey = process.env.CRYPTOAPIS_API_KEY || '';
  if (!apiKey) {
    console.error('‚ùå CRYPTOAPIS_API_KEY kh√¥ng ƒë∆∞·ª£c cung c·∫•p trong environment variables');
    return;
  }

  // URL endpoint - th·ª≠ endpoint li·ªát k√™ c√°c endpoints cho Dogecoin
  const url = `https://rest.cryptoapis.io/v2/blockchain-data/dogecoin/mainnet/info`;
  console.log(`üåê URL: ${url}`);

  try {
    console.log('üîÑ ƒêang g·ª≠i request...');
    const response = await fetchWithTimeout(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': apiKey
      }
    });

    console.log(`üìä Status: ${response.status} ${response.statusText}`);

    // C·ªë g·∫Øng ƒë·ªçc response body d√π th√†nh c√¥ng hay th·∫•t b·∫°i
    const responseText = await response.text();
    
    try {
      // C·ªë g·∫Øng parse th√†nh JSON
      const data = JSON.parse(responseText);
      console.log('üìÑ Response data:');
      console.log(JSON.stringify(data, null, 2));
    } catch (jsonError) {
      // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, hi·ªÉn th·ªã response text nguy√™n b·∫£n
      console.log('üìù Response text (kh√¥ng ph·∫£i JSON):');
      console.log(responseText);
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i request:', error);
  }
}

async function main() {
  console.log('===== B·∫Øt ƒë·∫ßu ki·ªÉm tra CryptoAPIs =====');
  
  // Ki·ªÉm tra API key t·ªìn t·∫°i
  const apiKey = process.env.CRYPTOAPIS_API_KEY;
  if (!apiKey) {
    console.error('‚ùå CRYPTOAPIS_API_KEY kh√¥ng t·ªìn t·∫°i trong environment variables');
    console.error('Vui l√≤ng th√™m CRYPTOAPIS_API_KEY v√†o environment variables v√† ch·∫°y l·∫°i');
    return;
  }

  // Ki·ªÉm tra endpoint balance
  await testCryptoApisBalanceEndpoint();
  
  // Ki·ªÉm tra endpoint list
  await testCryptoApisListEndpoint();
  
  // Ki·ªÉm tra endpoint available endpoints
  await testCryptoApisAvailableEndpoints();
  
  console.log('===== K·∫øt th√∫c ki·ªÉm tra CryptoAPIs =====');
}

// Run all tests
main().catch(error => {
  console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error);
});