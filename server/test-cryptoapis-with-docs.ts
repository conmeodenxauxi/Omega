/**
 * Script ki·ªÉm tra CryptoAPIs v·ªõi t√†i li·ªáu ch√≠nh th·ª©c
 * Tham kh·∫£o: https://developers.cryptoapis.io/technical-documentation/general-information/overview
 */

import fetch from 'node-fetch';

// ƒê·ªãa ch·ªâ Dogecoin ƒë·ªÉ ki·ªÉm tra
const TEST_ADDRESS = 'DQkwDpRYUyNNnoEZDfSGFFeQvLgbdEXiRd';
const API_KEY = process.env.CRYPTOAPIS_API_KEY || '';

// Th·ªùi gian timeout
const TIMEOUT_MS = 5000;

// Function ƒë·ªÉ fetch v·ªõi timeout
function fetchWithTimeout(url: string, options: any, timeout = TIMEOUT_MS) {
  return Promise.race([
    fetch(url, options),
    new Promise((_, reject) =>
      setTimeout(() => reject(new Error(`Request timed out after ${timeout}ms`)), timeout)
    )
  ]) as Promise<Response>;
}

// Th·ª≠ v·ªõi c·∫•u tr√∫c API m·ªõi t·ª´ t√†i li·ªáu
// https://developers.cryptoapis.io/technical-documentation/blockchain-data/address/get-address-details
async function testAddressDetails() {
  console.log('üîç Ki·ªÉm tra chi ti·∫øt ƒë·ªãa ch·ªâ Dogecoin theo t√†i li·ªáu m·ªõi');
  console.log(`üîë API Key: ${API_KEY ? API_KEY.substring(0, 5) + '...' : 'Kh√¥ng c√≥ API key'}`);

  if (!API_KEY) {
    console.error('‚ùå Kh√¥ng t√¨m th·∫•y API key. Vui l√≤ng ki·ªÉm tra CRYPTOAPIS_API_KEY.');
    return;
  }

  // URL endpoint theo t√†i li·ªáu m·ªõi
  const url = `https://rest.cryptoapis.io/blockchain-data/dogecoin/mainnet/addresses/${TEST_ADDRESS}`;
  console.log(`üåê URL: ${url}`);

  // Headers
  const headers = {
    'Content-Type': 'application/json',
    'X-API-Key': API_KEY
  };

  try {
    console.log('üîÑ ƒêang g·ª≠i request...');
    const response = await fetchWithTimeout(url, {
      method: 'GET',
      headers: headers
    });

    console.log(`üìä Status: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      let errorText = '';
      try {
        const errorData = await response.json();
        errorText = JSON.stringify(errorData, null, 2);
        console.error('‚ùå L·ªói:', errorText);
      } catch (e) {
        errorText = await response.text();
        console.error('‚ùå L·ªói (text):', errorText);
      }
      return;
    }

    const data = await response.json();
    console.log('‚úÖ Th√†nh c√¥ng! Response data:');
    console.log(JSON.stringify(data, null, 2));
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i request:', error);
  }
}

// Ki·ªÉm tra th√¥ng tin API
async function testApiInfo() {
  console.log('\nüîç Ki·ªÉm tra th√¥ng tin API theo t√†i li·ªáu m·ªõi');

  if (!API_KEY) {
    console.error('‚ùå Kh√¥ng t√¨m th·∫•y API key. Vui l√≤ng ki·ªÉm tra CRYPTOAPIS_API_KEY.');
    return;
  }

  // URL endpoint theo t√†i li·ªáu m·ªõi
  const url = 'https://rest.cryptoapis.io/info';
  console.log(`üåê URL: ${url}`);

  // Headers
  const headers = {
    'Content-Type': 'application/json',
    'X-API-Key': API_KEY
  };

  try {
    console.log('üîÑ ƒêang g·ª≠i request...');
    const response = await fetchWithTimeout(url, {
      method: 'GET',
      headers: headers
    });

    console.log(`üìä Status: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      let errorText = '';
      try {
        const errorData = await response.json();
        errorText = JSON.stringify(errorData, null, 2);
        console.error('‚ùå L·ªói:', errorText);
      } catch (e) {
        errorText = await response.text();
        console.error('‚ùå L·ªói (text):', errorText);
      }
      return;
    }

    const data = await response.json();
    console.log('‚úÖ Th√†nh c√¥ng! Response data:');
    console.log(JSON.stringify(data, null, 2));
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i request:', error);
  }
}

// Th·ª≠ v·ªõi t√†i li·ªáu v·ªÅ List supported assets
async function testListAssets() {
  console.log('\nüîç Ki·ªÉm tra danh s√°ch t√†i s·∫£n ƒë∆∞·ª£c h·ªó tr·ª£');

  if (!API_KEY) {
    console.error('‚ùå Kh√¥ng t√¨m th·∫•y API key. Vui l√≤ng ki·ªÉm tra CRYPTOAPIS_API_KEY.');
    return;
  }

  // URL endpoint theo t√†i li·ªáu m·ªõi
  const url = 'https://rest.cryptoapis.io/blockchain-data/assets';
  console.log(`üåê URL: ${url}`);

  // Headers
  const headers = {
    'Content-Type': 'application/json',
    'X-API-Key': API_KEY
  };

  try {
    console.log('üîÑ ƒêang g·ª≠i request...');
    const response = await fetchWithTimeout(url, {
      method: 'GET',
      headers: headers
    });

    console.log(`üìä Status: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      let errorText = '';
      try {
        const errorData = await response.json();
        errorText = JSON.stringify(errorData, null, 2);
        console.error('‚ùå L·ªói:', errorText);
      } catch (e) {
        errorText = await response.text();
        console.error('‚ùå L·ªói (text):', errorText);
      }
      return;
    }

    const data = await response.json();
    console.log('‚úÖ Th√†nh c√¥ng! Response data:');
    console.log(JSON.stringify(data, null, 2));
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i request:', error);
  }
}

// Main function
async function main() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra CryptoAPIs v·ªõi t√†i li·ªáu m·ªõi');
  
  // Ki·ªÉm tra chi ti·∫øt ƒë·ªãa ch·ªâ
  await testAddressDetails();
  
  // Ki·ªÉm tra th√¥ng tin API
  await testApiInfo();
  
  // Ki·ªÉm tra danh s√°ch t√†i s·∫£n
  await testListAssets();
}

// Run the main function
main().catch(error => {
  console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error);
});