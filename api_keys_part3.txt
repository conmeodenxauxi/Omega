  ]
};

/**
 * Tạo và lưu trữ các API endpoint cho tất cả các blockchain
 */
export const blockchainEndpoints: Record<BlockchainType, ApiEndpoint[]> = {
  'BTC': [
    // Public API (không cần API key)
    {
      name: 'BlockCypher Public',
      type: 'public',
      url: '',
      formatUrl: (address) => `https://api.blockcypher.com/v1/btc/main/addrs/${address}/balance`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: false,
      callCount: 0
    },
    // Blockchair Public API
    {
      name: 'Blockchair',
      type: 'public',
      url: '',
      formatUrl: (address) => `https://api.blockchair.com/bitcoin/dashboards/address/${address}`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: false,
      callCount: 0
    },
    // BlockCypher API với key
    {
      name: 'BlockCypher',
      type: 'private',
      url: '',
      formatUrl: (address, apiKey) => `https://api.blockcypher.com/v1/btc/main/addrs/${address}/balance?token=${apiKey}`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: true,
      callCount: 0
    },
    // GetBlock API 
    {
      name: 'GetBlock',
      type: 'private',
      url: '',
      formatUrl: (address, apiKey) => `https://go.getblock.io/${apiKey}/api/v2/address/${address}?details=basic`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: true,
      callCount: 0
    }
  ],
  'ETH': [
    // Public API (Etherscan без ключа - ограниченное количество запросов)
    {
      name: 'Etherscan Public',
      type: 'public',
      url: '',
      formatUrl: (address) => `https://api.etherscan.io/api?module=account&action=balance&address=${address}&tag=latest`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: false,
      callCount: 0
    },
    // Etherscan с API key
    {
      name: 'Etherscan',
      type: 'private',
      url: '',
      formatUrl: (address, apiKey) => `https://api.etherscan.io/api?module=account&action=balance&address=${address}&tag=latest&apikey=${apiKey}`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: true,
      callCount: 0
    }
  ],
  'BSC': [
    // Public API
    {
      name: 'BSCScan Public',
      type: 'public',
      url: '',
      formatUrl: (address) => `https://api.bscscan.com/api?module=account&action=balance&address=${address}&tag=latest`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: false,
      callCount: 0
    },
    // BSCScan с API key
    {
      name: 'BSCScan',
      type: 'private',
      url: '',
      formatUrl: (address, apiKey) => `https://api.bscscan.com/api?module=account&action=balance&address=${address}&tag=latest&apikey=${apiKey}`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: true,
      callCount: 0
    }
  ],
  'SOL': [
    // Public RPC API
    {
      name: 'Solana RPC',
      type: 'public',
      url: 'https://api.mainnet-beta.solana.com',
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      formatBody: (address) => {
        return JSON.stringify({
          jsonrpc: '2.0',
          id: 1,
          method: 'getBalance',
          params: [address]
        });
      },
      needsApiKey: false,
      callCount: 0
    },
    // Helius API
    {
      name: 'Helius',
      type: 'private',
      url: '',
      formatUrl: (address, apiKey) => `https://api.helius.xyz/v0/addresses/${address}/balances?api-key=${apiKey}`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: true,
      callCount: 0
    }
  ],
  'DOGE': [
    // Public APIs
    {
      name: 'Blockchair',
      type: 'public',
      url: '',
      formatUrl: (address) => `https://api.blockchair.com/dogecoin/dashboards/address/${address}`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: false,
      callCount: 0
    },
    {
      name: 'SoChain',
      type: 'public',
      url: '',
      formatUrl: (address) => `https://sochain.com/api/v2/get_address_balance/DOGE/${address}`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: false,
      callCount: 0
    },
    // Thêm các RPC Public cho Dogecoin
    {
      name: 'DogeChain',
      type: 'public',
      url: '',
      formatUrl: (address) => `https://dogechain.info/api/v1/address/balance/${address}`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: false,
      callCount: 0
    },
    {
      name: 'BlockCypher DOGE',
      type: 'public',
      url: '',
      formatUrl: (address) => `https://api.blockcypher.com/v1/doge/main/addrs/${address}/balance`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: false,
      callCount: 0
    },
    {
      name: 'Chain.so',
      type: 'public',
      url: '',
      formatUrl: (address) => `https://chain.so/api/v2/get_address_balance/DOGE/${address}`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: false,
      callCount: 0
    },
    // DOGE RPC Servers
    {
      name: 'DOGE-RPC-1',
      type: 'public',
      url: 'https://dogecoin.tokenview.io/api/address/tokenbalance/doge/',
      formatUrl: (address) => `https://dogecoin.tokenview.io/api/address/tokenbalance/doge/${address}`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: false,
      callCount: 0
    },
    {
      name: 'DOGE-RPC-2',
      type: 'public',
      url: '',
      formatUrl: (address) => `https://api.blockindex.net/api/dogecoin/address/${address}`,
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      needsApiKey: false,
      callCount: 0
    },
    // CryptoAPIs
    {
      name: 'CryptoAPIs',
      type: 'private',
      url: '',
      formatUrl: (address) => `https://rest.cryptoapis.io/v2/blockchain-data/doge/mainnet/addresses/${address}/balance`,
      formatHeaders: (apiKey) => ({
        'Content-Type': 'application/json',
        'X-API-Key': apiKey || ''
      }),
      method: 'GET',
      needsApiKey: true,
      callCount: 0
    },
    // Thêm Nownodes API cho Dogecoin
    {
      name: 'Nownodes',
      type: 'private',
      url: '',
      formatUrl: (address) => `https://doge.nownodes.io/api/v2/address/${address}`,
      formatHeaders: (apiKey) => ({
        'Content-Type': 'application/json',
        'api-key': '4eea1226-2f22-44af-9a91-5c61f2c82a9d',
        'Accept': 'application/json'
      }),
      method: 'GET',
      needsApiKey: true,
      callCount: 0
    },
    // Thêm BlockCypher cho Dogecoin
    {
      name: 'BlockCypherDOGE',
      type: 'public',
      url: '',
      formatUrl: (address) => `https://api.blockcypher.com/v1/doge/main/addrs/${address}/balance`,
      headers: { 'Content-Type': 'application/json' },
      method: 'GET',
      needsApiKey: false,
      callCount: 0
    }
  ]
};

// Lưu trữ index hiện tại của từng provider
const apiKeyIndices: Record<string, number> = {};

/**
 * Lấy ApiEndpoint tiếp theo theo chiến lược xoay vòng thông minh
 * @param blockchain Loại blockchain
 * @returns ApiEndpoint được chọn
 */
export function getNextEndpoint(blockchain: BlockchainType): ApiEndpoint {
  const endpoints = blockchainEndpoints[blockchain];
  if (!endpoints || endpoints.length === 0) {
    throw new Error(`Không có endpoint nào cho blockchain: ${blockchain}`);
  }

  // Sắp xếp endpoints theo số lần gọi, ưu tiên endpoint ít được sử dụng nhất
  endpoints.sort((a, b) => a.callCount - b.callCount);
  
  // Lấy endpoint có số lần gọi ít nhất
  const endpoint = endpoints[0];
  
  // Tăng số lần gọi
  endpoint.callCount++;
  
  console.log(`Đã chọn endpoint ${endpoint.name} cho ${blockchain} (đã gọi ${endpoint.callCount} lần)`);
  
  return endpoint;
}

/**
 * Lấy API key tiếp theo từ danh sách rotation
 * @param provider Tên nhà cung cấp API
 * @returns API key
 */
export function getNextApiKey(provider: string): string {
  if (!apiKeys[provider] || apiKeys[provider].length === 0) {
    throw new Error(`Không có API key nào cho provider: ${provider}`);
  }
  
  // Khởi tạo index nếu chưa tồn tại
  if (apiKeyIndices[provider] === undefined) {
    apiKeyIndices[provider] = 0;
  } else {
    // Tăng index và reset nếu vượt quá array length
    apiKeyIndices[provider] = (apiKeyIndices[provider] + 1) % apiKeys[provider].length;
  }
  
  return apiKeys[provider][apiKeyIndices[provider]];
}

/**
 * Lấy API key cho endpoint và provider tương ứng
 * @param blockchain Loại blockchain
 * @param endpoint API endpoint cần key
 * @returns API key hoặc rỗng nếu không cần key
 */
export function getApiKey(blockchain: BlockchainType, endpointName?: string): string {
  if (!endpointName) {
    // Lấy endpoint tiếp theo theo chiến lược xoay vòng
    const endpoint = getNextEndpoint(blockchain);
    endpointName = endpoint.name;
  }
  
  // Xác định provider dựa trên tên endpoint
  let provider: string | undefined;
  
  switch (endpointName) {
    case 'BlockCypher':
      provider = 'BTC_BLOCKCYPHER';
      break;
    case 'GetBlock':
      provider = 'BTC_GETBLOCK';
      break;
    case 'Etherscan':
      provider = 'ETH_ETHERSCAN';
      break;
    case 'BSCScan':
      provider = 'BSC_BSCSCAN';
      break;
    case 'Helius':
      provider = 'SOL_HELIUS';
      break;
    case 'CryptoAPIs':
      provider = 'DOGE_CRYPTOAPIS';
      break;
    default:
      // Endpoint công khai không cần API key
      return '';
  }
  
  return getNextApiKey(provider);
}

/**
 * Chuẩn bị URL và headers cho API request
 * @param blockchain Loại blockchain
 * @param address Địa chỉ ví
 * @returns {url, headers, method, body} cho API request
 */
export function prepareApiRequest(blockchain: BlockchainType, address: string): { 
  url: string, 
  headers: Record<string, string>,
  method: string,
  body?: string 
} {
  // Lấy endpoint tiếp theo theo chiến lược xoay vòng
  const endpoint = getNextEndpoint(blockchain);
  
  let apiKey = '';
  if (endpoint.needsApiKey) {
    // Xác định provider từ tên endpoint
    apiKey = getApiKey(blockchain, endpoint.name);
  }
  
  // Chuẩn bị URL
  const url = endpoint.formatUrl 
    ? endpoint.formatUrl(address, apiKey) 
    : endpoint.url;
  
  // Chuẩn bị headers
  const headers = endpoint.formatHeaders 
    ? endpoint.formatHeaders(apiKey) 
    : endpoint.headers || { 'Content-Type': 'application/json' };
  
  // Chuẩn bị body nếu cần
  const body = endpoint.formatBody 
    ? endpoint.formatBody(address, apiKey) 
    : undefined;
  
  return { 
    url, 
    headers, 
    method: endpoint.method || 'GET',
    body
  };
}

/**
 * Lấy tất cả các cấu hình API cho blockchain
 * @param blockchain Loại blockchain
 * @param address Địa chỉ ví
 * @returns Mảng các cấu hình API
 */
export function getAllApiConfigs(blockchain: BlockchainType, address: string): Array<{
  name: string;
  url: string;
  headers: Record<string, string>;
  method: string;
  body?: string;
}> {
  const endpoints = blockchainEndpoints[blockchain];
  
  return endpoints.map(endpoint => {
    let apiKey = '';
    if (endpoint.needsApiKey) {
      // Nếu endpoint yêu cầu API key, lấy key tiếp theo
      switch (endpoint.name) {
        case 'BlockCypher':
          apiKey = getNextApiKey('BTC_BLOCKCYPHER');
          break;
        case 'GetBlock':
          apiKey = getNextApiKey('BTC_GETBLOCK');
          break;
        case 'Etherscan':
          apiKey = getNextApiKey('ETH_ETHERSCAN');
          break;
        case 'BSCScan':
          apiKey = getNextApiKey('BSC_BSCSCAN');
          break;
        case 'Helius':
          apiKey = getNextApiKey('SOL_HELIUS');
          break;
        case 'CryptoAPIs':
          apiKey = getNextApiKey('DOGE_CRYPTOAPIS');
          break;
      }
    }
    
    // Chuẩn bị URL
    const url = endpoint.formatUrl 
      ? endpoint.formatUrl(address, apiKey) 
      : endpoint.url;
    
    // Chuẩn bị headers
    const headers = endpoint.formatHeaders 
      ? endpoint.formatHeaders(apiKey) 
      : endpoint.headers || { 'Content-Type': 'application/json' };
    
    // Chuẩn bị body nếu cần
    const body = endpoint.formatBody 
      ? endpoint.formatBody(address, apiKey) 
      : undefined;
    
    // Tăng số lần gọi khi tạo cấu hình
    endpoint.callCount++;
    
    return {
      name: endpoint.name,
      url,
      headers,
      method: endpoint.method || 'GET',
      body: body ? JSON.stringify(body) : undefined
    };
  });
}

/**
 * Lấy các config API để sử dụng trong API request
 * @param blockchain Loại blockchain
 * @param address Địa chỉ ví
 * @returns Mảng các cấu hình API
 */
export function getApiConfigs(blockchain: BlockchainType, address: string): Array<{
  name: string;
  url: string;
  headers: Record<string, string>;
  method: string;
  body?: string;
}> {
  return getAllApiConfigs(blockchain, address);
}