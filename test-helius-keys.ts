/**
 * Script ki·ªÉm tra danh s√°ch key Helius ƒë·ªÉ x√°c ƒë·ªãnh key n√†o c√≤n ho·∫°t ƒë·ªông
 */
import fetch from 'node-fetch';

// ƒê·ªãa ch·ªâ Solana m·∫´u ƒë·ªÉ test
const TEST_ADDRESS = 'EedZkdJaUFFVj9vHFpjGTUF1XWcN5f37NGsXrynwcrSj';

// Danh s√°ch API keys Helius t·ª´ m√£ ngu·ªìn - Ch·ªçn key cu·ªëi c√πng ch∆∞a ki·ªÉm tra
const heliusApiKeys = [
  // 15 key ƒë·∫ßu ƒë√£ ki·ªÉm tra v√† kh√¥ng h·ª£p l·ªá
  'e4a7ad23-a358-48e5-9830-576e6a7d3890',
  '38a6f01b-e32b-492c-9a96-29ad3d45b838',
  'cd2e7fad-15b4-4896-98d5-b9dccb6ca55e',
  '7b3a5e78-6ff3-402c-b390-7160f755d3d2',
  '1a8b6c2d-4f9e-40e3-967a-91d2c8f5b0a7'
];

// Th√™m key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng n·∫øu c√≥ v√† kh√°c v·ªõi c√°c key ƒë√£ c√≥
const envKey = process.env.HELIUS_API_KEY;
if (envKey && !heliusApiKeys.includes(envKey)) {
  heliusApiKeys.push(envKey);
  console.log(`ƒê√£ th√™m HELIUS_API_KEY t·ª´ bi·∫øn m√¥i tr∆∞·ªùng: ${envKey.substring(0, 6)}...`);
}

/**
 * Ki·ªÉm tra API key Helius
 * @param apiKey API key c·∫ßn ki·ªÉm tra
 * @param address ƒê·ªãa ch·ªâ Solana
 * @returns K·∫øt qu·∫£ ki·ªÉm tra
 */
async function testHeliusKey(apiKey: string, address: string): Promise<{
  apiKey: string;
  isValid: boolean;
  error?: string;
  balance?: string;
}> {
  try {
    const response = await fetch('https://mainnet.helius-rpc.com/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': apiKey
      },
      body: JSON.stringify({
        jsonrpc: '2.0',
        id: 1,
        method: 'getBalance',
        params: [address]
      })
    });

    const data = await response.json();
    
    // Ki·ªÉm tra l·ªói API key
    if (data.error && data.error.code === -32401) {
      return {
        apiKey,
        isValid: false,
        error: 'API key kh√¥ng h·ª£p l·ªá'
      };
    }
    
    // Ki·ªÉm tra l·ªói kh√°c
    if (data.error) {
      return {
        apiKey,
        isValid: false,
        error: `L·ªói: ${JSON.stringify(data.error)}`
      };
    }
    
    // L·∫•y s·ªë d∆∞ n·∫øu c√≥
    if (data.result && data.result.value !== undefined) {
      const balanceInLamports = data.result.value;
      const balanceInSOL = (balanceInLamports / 1e9).toFixed(9);
      
      return {
        apiKey,
        isValid: true,
        balance: balanceInSOL
      };
    }
    
    return {
      apiKey,
      isValid: true,
      error: 'ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng ƒë√∫ng'
    };
    
  } catch (error) {
    return {
      apiKey,
      isValid: false,
      error: `L·ªói k·∫øt n·ªëi: ${error instanceof Error ? error.message : 'Kh√¥ng x√°c ƒë·ªãnh'}`
    };
  }
}

/**
 * Ki·ªÉm tra t·∫•t c·∫£ API keys
 */
async function testAllHeliusKeys() {
  console.log(`‚è≥ B·∫Øt ƒë·∫ßu ki·ªÉm tra ${heliusApiKeys.length} Helius API keys...`);
  
  const results = [];
  let validKeysCount = 0;
  
  for (let i = 0; i < heliusApiKeys.length; i++) {
    const apiKey = heliusApiKeys[i];
    const result = await testHeliusKey(apiKey, TEST_ADDRESS);
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    if (result.isValid) {
      console.log(`‚úÖ Key #${i+1}: ${apiKey.substring(0, 10)}... h·ª£p l·ªá${result.balance ? ` (S·ªë d∆∞: ${result.balance} SOL)` : ''}`);
      validKeysCount++;
    } else {
      console.log(`‚ùå Key #${i+1}: ${apiKey.substring(0, 10)}... kh√¥ng h·ª£p l·ªá (${result.error})`);
    }
    
    results.push(result);
    
    // Ch·ªù 500ms gi·ªØa m·ªói request ƒë·ªÉ tr√°nh rate limit
    if (i < heliusApiKeys.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 500));
    }
  }
  
  // Hi·ªÉn th·ªã t·ªïng k·∫øt
  console.log(`\nüìä T·ªïng k·∫øt: ${validKeysCount}/${heliusApiKeys.length} keys h·ª£p l·ªá`);
  
  // Li·ªát k√™ c√°c key h·ª£p l·ªá
  if (validKeysCount > 0) {
    console.log('\nüìù Danh s√°ch key h·ª£p l·ªá:');
    results.forEach((result, index) => {
      if (result.isValid) {
        console.log(`- '${heliusApiKeys[index]}'`);
      }
    });
    
    // ƒê·ªÅ xu·∫•t s·ª≠a m√£ ngu·ªìn
    console.log('\nüí° G·ª£i √Ω: C·∫≠p nh·∫≠t m·∫£ng SOL_HELIUS trong server/blockchain/api-keys.ts v·ªõi c√°c key h·ª£p l·ªá tr√™n');
  } else {
    console.log('\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y key h·ª£p l·ªá n√†o. H√£y t·∫°o key m·ªõi tr√™n trang Helius.xyz');
  }
}

// Ch·∫°y ki·ªÉm tra
testAllHeliusKeys().catch(error => {
  console.error('L·ªói:', error);
});